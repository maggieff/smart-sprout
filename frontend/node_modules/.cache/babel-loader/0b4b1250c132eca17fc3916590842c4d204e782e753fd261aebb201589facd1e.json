{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const logService = {\n  /**\n   * Get logs for a specific plant\n   */\n  async getLogs(plantId, limit = 10, type = null) {\n    try {\n      const params = new URLSearchParams({\n        plantId,\n        limit: limit.toString()\n      });\n      if (type) {\n        params.append('type', type);\n      }\n      const response = await api.get(`/logs?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching logs:', error);\n      throw new Error('Failed to fetch logs');\n    }\n  },\n  /**\n   * Create a new log entry\n   */\n  async createLog(logData) {\n    try {\n      const response = await api.post('/logs', logData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating log:', error);\n      throw new Error('Failed to create log');\n    }\n  },\n  /**\n   * Update an existing log\n   */\n  async updateLog(logId, logData) {\n    try {\n      const response = await api.put(`/logs/${logId}`, logData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating log:', error);\n      throw new Error('Failed to update log');\n    }\n  },\n  /**\n   * Delete a log entry\n   */\n  async deleteLog(logId) {\n    try {\n      const response = await api.delete(`/logs/${logId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting log:', error);\n      throw new Error('Failed to delete log');\n    }\n  },\n  /**\n   * Get log statistics for a plant\n   */\n  async getLogStats(plantId) {\n    try {\n      const response = await api.get(`/logs/stats?plantId=${plantId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching log stats:', error);\n      throw new Error('Failed to fetch log statistics');\n    }\n  },\n  /**\n   * Get logs by type\n   */\n  async getLogsByType(plantId, type) {\n    try {\n      const response = await api.get(`/logs?plantId=${plantId}&type=${type}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching logs by type:', error);\n      throw new Error('Failed to fetch logs by type');\n    }\n  },\n  /**\n   * Get recent activity summary\n   */\n  async getRecentActivity(plantId, days = 7) {\n    try {\n      const response = await api.get(`/logs/activity?plantId=${plantId}&days=${days}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recent activity:', error);\n      throw new Error('Failed to fetch recent activity');\n    }\n  }\n};\nexport default logService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","logService","getLogs","plantId","limit","type","params","URLSearchParams","toString","append","response","get","data","error","console","Error","createLog","logData","post","updateLog","logId","put","deleteLog","delete","getLogStats","getLogsByType","getRecentActivity","days"],"sources":["/Users/maggie/Desktop/smart-sprout/frontend/src/services/logService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const logService = {\n  /**\n   * Get logs for a specific plant\n   */\n  async getLogs(plantId, limit = 10, type = null) {\n    try {\n      const params = new URLSearchParams({\n        plantId,\n        limit: limit.toString()\n      });\n      \n      if (type) {\n        params.append('type', type);\n      }\n      \n      const response = await api.get(`/logs?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching logs:', error);\n      throw new Error('Failed to fetch logs');\n    }\n  },\n\n  /**\n   * Create a new log entry\n   */\n  async createLog(logData) {\n    try {\n      const response = await api.post('/logs', logData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating log:', error);\n      throw new Error('Failed to create log');\n    }\n  },\n\n  /**\n   * Update an existing log\n   */\n  async updateLog(logId, logData) {\n    try {\n      const response = await api.put(`/logs/${logId}`, logData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating log:', error);\n      throw new Error('Failed to update log');\n    }\n  },\n\n  /**\n   * Delete a log entry\n   */\n  async deleteLog(logId) {\n    try {\n      const response = await api.delete(`/logs/${logId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting log:', error);\n      throw new Error('Failed to delete log');\n    }\n  },\n\n  /**\n   * Get log statistics for a plant\n   */\n  async getLogStats(plantId) {\n    try {\n      const response = await api.get(`/logs/stats?plantId=${plantId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching log stats:', error);\n      throw new Error('Failed to fetch log statistics');\n    }\n  },\n\n  /**\n   * Get logs by type\n   */\n  async getLogsByType(plantId, type) {\n    try {\n      const response = await api.get(`/logs?plantId=${plantId}&type=${type}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching logs by type:', error);\n      throw new Error('Failed to fetch logs by type');\n    }\n  },\n\n  /**\n   * Get recent activity summary\n   */\n  async getRecentActivity(plantId, days = 7) {\n    try {\n      const response = await api.get(`/logs/activity?plantId=${plantId}&days=${days}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recent activity:', error);\n      throw new Error('Failed to fetch recent activity');\n    }\n  }\n};\n\nexport default logService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}