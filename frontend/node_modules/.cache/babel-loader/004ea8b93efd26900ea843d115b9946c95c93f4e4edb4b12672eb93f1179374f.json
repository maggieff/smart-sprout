{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`üå± API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('‚ùå API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('‚ùå API Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const plantService = {\n  /**\n   * Get all plants\n   */\n  async getAllPlants() {\n    try {\n      const response = await api.get('/plant-data/all');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching all plants:', error);\n      throw new Error('Failed to fetch plants');\n    }\n  },\n  /**\n   * Get specific plant data\n   */\n  async getPlantData(plantId) {\n    try {\n      const response = await api.get(`/plant-data?plantId=${plantId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching plant data:', error);\n      throw new Error('Failed to fetch plant data');\n    }\n  },\n  /**\n   * Get sensor history for a plant\n   */\n  async getSensorHistory(plantId, hours = 24) {\n    try {\n      // For demo purposes, generate mock sensor history\n      const history = this.generateMockSensorHistory(hours);\n      return history;\n    } catch (error) {\n      console.error('Error fetching sensor history:', error);\n      throw new Error('Failed to fetch sensor history');\n    }\n  },\n  /**\n   * Generate mock sensor history for demo\n   */\n  generateMockSensorHistory(hours = 24) {\n    const history = [];\n    const now = new Date();\n    const interval = hours * 60 * 60 * 1000 / 24; // 24 data points\n\n    for (let i = 0; i < 24; i++) {\n      const timestamp = new Date(now - (23 - i) * interval);\n      const baseMoisture = 50 + Math.sin(i / 24 * Math.PI * 2) * 20;\n      const baseLight = 500 + Math.sin(i / 24 * Math.PI * 2 + Math.PI) * 200;\n      const baseTemp = 72 + Math.sin(i / 24 * Math.PI * 2) * 10;\n      const baseHumidity = 50 + Math.sin(i / 24 * Math.PI * 2 + Math.PI / 2) * 15;\n      history.push({\n        timestamp: timestamp.toISOString(),\n        moisture: Math.max(0, Math.min(100, baseMoisture + (Math.random() - 0.5) * 10)),\n        light: Math.max(0, baseLight + (Math.random() - 0.5) * 100),\n        temperature: Math.max(50, Math.min(100, baseTemp + (Math.random() - 0.5) * 5)),\n        humidity: Math.max(20, Math.min(90, baseHumidity + (Math.random() - 0.5) * 10))\n      });\n    }\n    return history;\n  },\n  /**\n   * Update plant data\n   */\n  async updatePlantData(plantId, data) {\n    try {\n      const response = await api.put(`/plant-data/${plantId}`, data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating plant data:', error);\n      throw new Error('Failed to update plant data');\n    }\n  },\n  /**\n   * Get plant recommendations\n   */\n  async getRecommendations(plantId) {\n    try {\n      const response = await api.get(`/plant-data/${plantId}/recommendations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recommendations:', error);\n      throw new Error('Failed to fetch recommendations');\n    }\n  },\n  /**\n   * Get plant alerts\n   */\n  async getAlerts(plantId) {\n    try {\n      const response = await api.get(`/plant-data/${plantId}/alerts`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching alerts:', error);\n      throw new Error('Failed to fetch alerts');\n    }\n  },\n  /**\n   * Simulate sensor data update\n   */\n  async simulateSensorUpdate(plantId) {\n    try {\n      const response = await api.post(`/plant-data/${plantId}/simulate`);\n      return response.data;\n    } catch (error) {\n      console.error('Error simulating sensor update:', error);\n      throw new Error('Failed to simulate sensor update');\n    }\n  }\n};\nexport default plantService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","plantService","getAllPlants","get","Error","getPlantData","plantId","getSensorHistory","hours","history","generateMockSensorHistory","now","Date","interval","i","timestamp","baseMoisture","Math","sin","PI","baseLight","baseTemp","baseHumidity","push","toISOString","moisture","max","min","random","light","temperature","humidity","updatePlantData","put","getRecommendations","getAlerts","simulateSensorUpdate","post"],"sources":["/Users/maggie/Desktop/smart-sprout/frontend/src/services/plantService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    console.log(`üå± API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('‚ùå API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => {\n    console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);\n    return response;\n  },\n  (error) => {\n    console.error('‚ùå API Response Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\nexport const plantService = {\n  /**\n   * Get all plants\n   */\n  async getAllPlants() {\n    try {\n      const response = await api.get('/plant-data/all');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching all plants:', error);\n      throw new Error('Failed to fetch plants');\n    }\n  },\n\n  /**\n   * Get specific plant data\n   */\n  async getPlantData(plantId) {\n    try {\n      const response = await api.get(`/plant-data?plantId=${plantId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching plant data:', error);\n      throw new Error('Failed to fetch plant data');\n    }\n  },\n\n  /**\n   * Get sensor history for a plant\n   */\n  async getSensorHistory(plantId, hours = 24) {\n    try {\n      // For demo purposes, generate mock sensor history\n      const history = this.generateMockSensorHistory(hours);\n      return history;\n    } catch (error) {\n      console.error('Error fetching sensor history:', error);\n      throw new Error('Failed to fetch sensor history');\n    }\n  },\n\n  /**\n   * Generate mock sensor history for demo\n   */\n  generateMockSensorHistory(hours = 24) {\n    const history = [];\n    const now = new Date();\n    const interval = (hours * 60 * 60 * 1000) / 24; // 24 data points\n    \n    for (let i = 0; i < 24; i++) {\n      const timestamp = new Date(now - (23 - i) * interval);\n      const baseMoisture = 50 + Math.sin((i / 24) * Math.PI * 2) * 20;\n      const baseLight = 500 + Math.sin((i / 24) * Math.PI * 2 + Math.PI) * 200;\n      const baseTemp = 72 + Math.sin((i / 24) * Math.PI * 2) * 10;\n      const baseHumidity = 50 + Math.sin((i / 24) * Math.PI * 2 + Math.PI/2) * 15;\n      \n      history.push({\n        timestamp: timestamp.toISOString(),\n        moisture: Math.max(0, Math.min(100, baseMoisture + (Math.random() - 0.5) * 10)),\n        light: Math.max(0, baseLight + (Math.random() - 0.5) * 100),\n        temperature: Math.max(50, Math.min(100, baseTemp + (Math.random() - 0.5) * 5)),\n        humidity: Math.max(20, Math.min(90, baseHumidity + (Math.random() - 0.5) * 10))\n      });\n    }\n    \n    return history;\n  },\n\n  /**\n   * Update plant data\n   */\n  async updatePlantData(plantId, data) {\n    try {\n      const response = await api.put(`/plant-data/${plantId}`, data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating plant data:', error);\n      throw new Error('Failed to update plant data');\n    }\n  },\n\n  /**\n   * Get plant recommendations\n   */\n  async getRecommendations(plantId) {\n    try {\n      const response = await api.get(`/plant-data/${plantId}/recommendations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recommendations:', error);\n      throw new Error('Failed to fetch recommendations');\n    }\n  },\n\n  /**\n   * Get plant alerts\n   */\n  async getAlerts(plantId) {\n    try {\n      const response = await api.get(`/plant-data/${plantId}/alerts`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching alerts:', error);\n      throw new Error('Failed to fetch alerts');\n    }\n  },\n\n  /**\n   * Simulate sensor data update\n   */\n  async simulateSensorUpdate(plantId) {\n    try {\n      const response = await api.post(`/plant-data/${plantId}/simulate`);\n      return response.data;\n    } catch (error) {\n      console.error('Error simulating sensor update:', error);\n      throw new Error('Failed to simulate sensor update');\n    }\n  }\n};\n\nexport default plantService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}